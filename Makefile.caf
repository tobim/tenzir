phony := gen
.DEFAULT: config
.PHONY: $(phony) all

EXTERNAL := $(filter-out $(phony), $(MAKECMDGOALS))

ns := nix-shell --pure

source := caf
builddir := $(HOME)/build/caf
installdir := $(HOME)/install/caf

ifeq (${attr},)
	attr := clang6
endif

ifeq (${variant},)
	variant := debug
endif

ifneq (${dtag},)
	dtag_ := -${dtag}
endif

ifneq (${lld},)
	dtag_ += -lld
	ns += --arg use_lld true
endif


all: gen

comma:= ,
empty:=
space:= $(empty) $(empty)
attr_:= $(subst $(comma),$(space),$(attr))
variant_:= $(subst $(comma),$(space),$(variant))

CMAKEARGS := -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=1

CMAKEARGS := -DCAF_USE_CCACHE:BOOL=1
CMAKEARGS += -DCAF_NO_BENCHMARKS:BOOL=1
CMAKEARGS += -DCAF_NO_EXAMPLES:BOOL=1
CMAKEARGS += -DCAF_NO_OPENCL:BOOL=1
CMAKEARGS += -DCAF_NO_OPENSSL:BOOL=1
CMAKEARGS += -DCAF_NO_PYTHON:BOOL=1
CMAKEARGS += -DCAF_NO_AUTO_LIBCPP:BOOL=1
CMAKEARGS += -DCAF_NO_COMPILER_CHECK:BOOL=1
#CMAKEARGS += -DMORE_WARNINGS:BOOL=1

CCACHE_CPP2 := true
export CCACHE_CPP2

$(buiddir):
	mkdir -p $@

.cache:
	mkdir -p $@

define BOZO

CMAKEARGS-$(1)$(2) := $(CMAKEARGS)

ifeq ($(2),debug)
	VC-$(1)$(2) := Debug
endif
ifeq ($(2),release)
	VC-$(1)$(2) := RelWithDebInfo
endif
ifeq ($(2),rere)
	VC-$(1)$(2) := Release
	CMAKEARGS-$(1)$(2) += -DCAF_LOG_LEVEL:STRING=2
else
	CMAKEARGS-$(1)$(2) += -DCAF_LOG_LEVEL:STRING=4
	$(if $(filter "$(origin san)","undefined"),SAN-$(1)$(2) := asan)
endif

ifneq ($$(filter asan,$$(SAN-$(1)$(2))),)
	CMAKEARGS-$(1)$(2) += -DCAF_ENABLE_ADDRESS_SANITIZER=1
endif

ifneq ($$(filter tsan,$$(SAN-$(1)$(2))),)
	CMAKEARGS-$(1)$(2) += -DCAF_ENABLE_THREAD_SANITIZER=1
endif

ifneq ($$(filter ubsan,$$(SAN-$(1)$(2))),)
	CMAKEARGS-$(1)$(2) += -DCAF_ENABLE_UNDEFINED_SANITIZER=1
endif

ifneq ($$(SAN-$(1)$(2)),)
	SAN_-$(1)$(2) = -$$(subst $$(comma),+,$$(SAN-$(1)$(2)))
endif

SUBBUILD-$(1)$(2) := $(1)-$(2)$$(SAN_-$(1)$(2))$(dtag_)
BUILDDIR-$(1)$(2) := $(builddir)/$$(SUBBUILD-$(1)$(2))
BUILD-$(1)$(2) := $$(BUILDDIR-$(1)$(2))/Makefile
INSTALLDIR-$(1)$(2) := $(installdir)/$$(SUBBUILD-$(1)$(2))

$$(BUILD-$(1)$(2)): | $$(buiddir) .cache
	#$(ns) --argstr compiler $(1) --run "NIX_CXXSTDLIB_LINK='' cmake -B$$(BUILDDIR-$(1)$(2)) -H$(source) -DCMAKE_BUILD_TYPE=$$(VC-$(1)$(2)) -DLIBRARY_OUTPUT_PATH=$$(BUILDDIR-$(1)$(2))/lib -DEXECUTABLE_OUTPUT_PATH=$$(BUILDDIR-$(1)$(2))/bin $$(CMAKEARGS-$(1)$(2))"
	$(ns) --argstr compiler $(1) --run "NIX_CXXSTDLIB_LINK='' cmake -B$$(BUILDDIR-$(1)$(2)) -H$(source) -DCMAKE_BUILD_TYPE=$$(VC-$(1)$(2)) -DCMAKE_INSTALL_PREFIX=$$(INSTALLDIR-$(1)$(2)) $$(CMAKEARGS-$(1)$(2))"
	cp "$$(BUILDDIR-$(1)$(2))/compile_commands.json" .cache/compile_commands_caf.json
	jq '.[]' .cache/compile_commands_*.json | jq -s '.' > compile_commands.json

gen: $$(BUILD-$(1)$(2))

.PHONY:=run-$(1)$(2)
run-$(1)$(2): $$(BUILD-$(1)$(2))
	eval `$(ns) --argstr compiler $(1) --run "export" | sed 's/$$$$/\;/'`; \
	NIX_CXXSTDLIB_LINK=''; \
	$$(MAKE) -C $$(BUILDDIR-$(1)$(2)) $$(EXTERNAL) --no-print-directory

$(or $(lastword $(EXTERNAL)), all): run-$(1)$(2)

endef

#$(foreach i,${attr_},$(foreach j,${variant_},$(info $(call BOZO,$(i),$(j)))))
$(foreach i,${attr_},$(foreach j,${variant_},$(eval $(call BOZO,$(i),$(j)))))

shell:
	nix-shell --argstr compiler ${attr}
